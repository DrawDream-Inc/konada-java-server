# Test
name: Docker Image CI

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build
      - name: Get current time
        id: current-time
        run: echo "::set-output name=formattedTime::$(date +%Y-%m-%d-%H-%M-%S)"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr
      - name: Build, tag, and push image to Amazon ECR
        run: |
          docker build -t posting-api:latest .
          docker tag posting-api:latest ${{ secrets.AWS_ECR_REGISTRY }}:latest
          docker push ${{ secrets.AWS_ECR_REGISTRY }}:latest
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .ecs/prod/task.json # task파일
          container-name: posting-api
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ecs-task-posting-2 #클러스터 서비스 명
          cluster: my-fisrt-cluster # 클러스터 명
          wait-for-service-stability: true